---
interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en" class="bg-black">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Creative Developer Jay D Dev - Hacker-themed portfolio showcasing innovative web development and design" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <link href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;700&display=swap" rel="stylesheet">
  </head>
  <body class="font-mono bg-black text-green-500">
    <div id="custom-cursor" class="custom-cursor"></div>
    <slot />
    <script>
      // Custom cursor
      const cursor = document.getElementById('custom-cursor');
      const defaultCursor = document.createElement('div');
      defaultCursor.className = 'default-cursor';
      document.body.appendChild(defaultCursor);

      document.addEventListener('mousemove', (e) => {
        if (cursor) {
          cursor.style.left = e.clientX + 'px';
          cursor.style.top = e.clientY + 'px';
        }
        defaultCursor.style.left = e.clientX + 'px';
        defaultCursor.style.top = e.clientY + 'px';
      });

      // Make links and buttons interactive
      const interactiveElements = document.querySelectorAll('a, button, [role="button"]');
      interactiveElements.forEach(element => {
        element.addEventListener('mouseenter', () => {
          cursor?.classList.add('cursor-hover');
        });
        element.addEventListener('mouseleave', () => {
          cursor?.classList.remove('cursor-hover');
        });
      });
    </script>
  </body>
</html>

<style is:global>
  :root {
    --cursor-color: #00ff00;
  }
  
  html {
    font-family: 'JetBrains Mono', monospace;
    background: #000;
    color: #00ff00;
    overflow-y: auto;
  }

  body {
    margin: 0;
    padding: 0;
    min-height: 100vh;
    cursor: none !important;
    background: #000;
    color: #00ff00;
  }

  /* Show default cursor for interactive elements */
  a, button, [role="button"] {
    cursor: none !important;
  }

  /* Custom cursor styles */
  .custom-cursor {
    width: 20px;
    height: 20px;
    border: 2px solid #00ff00;
    border-radius: 50%;
    position: fixed;
    pointer-events: none;
    z-index: 9999;
    transition: width 0.2s, height 0.2s;
    mix-blend-mode: difference;
  }

  .custom-cursor::after {
    content: '';
    width: 4px;
    height: 4px;
    background: #00ff00;
    border-radius: 50%;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  .custom-cursor.cursor-hover {
    width: 40px;
    height: 40px;
    background: rgba(0, 255, 0, 0.1);
  }

  .default-cursor {
    width: 5px;
    height: 5px;
    background: #00ff00;
    border-radius: 50%;
    position: fixed;
    pointer-events: none;
    z-index: 10000;
    mix-blend-mode: difference;
  }

  ::selection {
    background: rgba(0, 255, 0, 0.3);
    color: #fff;
  }
</style>